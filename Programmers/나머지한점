
x_lis = []
y_lis = []
def solution(v):   
    for lis in v:
        x_lis.append(lis[0])
        y_lis.append(lis[1])         
    dic_x = dict((al, x_lis.count(al)) for al in set(x_lis))
    dic_y = dict((al, y_lis.count(al)) for al in set(y_lis))
    
    answer = []
    for k, v in dic_x.items():
        if v != 2:
            answer.append(k)
    for k, v in dic_y.items():
        if v !=2:
            answer.append(k)
    return answer

-------------------------------------------------------------------
# 다른 사람풀이 
def solution(v):
    answer = []
    x = [] 
    y = []
    # list.remove(element)
    for lis in v:
        if lis[0] not in x:
            x.append(lis[0])
        else:
            x.remove(lis[0])
        if lis[1] not in y:
            y.append(lis[1])
        else:
            y.remove(lis[1])
    answer  = x + y 
    return answer
            
----------------------------------------------------------------------
# 다른사람풀이2

    def solution(v):
    answer = []
    x = sorted(list(map(lambda x:x[0], v)))  # [1,3,3] .. [1,1,2]
    y = sorted(list(map(lambda y:y[1], v)))
    
    # x랑 y는 무조건 3개씩 원소를 갖고 있음. 현재 오름차순으로 정렬한 상태라, 0번 인덱스와 1번 인덱스가 같으면 그냥 무시하고 2번 인덱스 append 
    # 0번 인덱스와 1번 인덱스가 다르면 0번 인덱스를 붙인다. 1번 인덱스를 append하면은 오름차순이라, 1번과 2번이 다르다. 
    if x[0] == x[1]:
        answer.append(x[2])
    elif x[0] != x[1]:
        answer.append(x[0])         
    if y[0] == y[1]:
        answer.append(y[2])
    elif y[0] != y[1]:
        answer.append(y[0])
    return answer
