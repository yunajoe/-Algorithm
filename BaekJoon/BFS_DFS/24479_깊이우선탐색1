

n, m, start = map(int,input().split())


lines = [[] for _ in range(m)]
visited = [False] * (n+1)

for line in lines:
    n1, n2 = map(int, input().split())
    lines[n1].append(n2)
    lines[n2].append(n1)


lines = [sorted(li) for li in lines]

#lines = [[],[2,4],[1,3,4],[2,4],[2,3]]
def DFS(lines, visited, start):
    visited[start] = True 
    for node in lines[start]:  # 해당 노드의 주변 노드 탐색
         if visited[node] == False:
            visited[node] = True
            DFS(lines, visited, node)   # 여기서 DFS는 재귀를 써서 아래로 내려 가는데 , BFS는 재귀를 사용하지 않는 이유는 해당 노드의 인접 노드를 일단은! 다 들려봐야 되게 때문에, 재귀를 사용하면은 인접노드를 다 둘러보는대신 
    return visited



if __name__ == '__main__':
    result = DFS(lines, visited, start)
    for i in range(1,len(result)):
        if result[i]:
            print(i)  
        else:
            print(0)
    

# 런타임 에러 (RecursionError)







