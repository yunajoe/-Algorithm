

def solution(n, money_list):
    profit_table = []
    for i in range(n):
        if i < len(money_list): # n이 money_list의 인덱스에 다 포함될때.. 
            profit = money_list[i]
        else:
            # 그 값이 없으면 모든 경우의 수를 
            profit = 0 # 얘는 max(profit, ...) 처럼 비교하기 위해서                             
        
        for j in range((i//2)+1):
            profit = max(profit, money_list[j] + money_list[i-j])              
        profit_table.append(profit)
        
    return profit_table[n-1]
            
          
if __name__ == "__main__":
    n = int(input())
    money = list(map(int, input().split()))
    print(solution(n, money))


# 틀림   
=================================================================================== 




# n보다 money_list2의 len()이 큰 경우와, 작은 경우로 나뉠 수 있다 

def solution(n, money_list):
    profit_table = []
    for i in range(1,n):
        if i < len(money_list): # n이 money_list의 인덱스에 다 포함될때.. 
            profit = money_list[i]
        else:
            # 그 값이 없으면 모든 경우의 수를 
            profit = 0 # 얘는 max(profit, ...) 처럼 비교하기 위해서                             
        
        for j in range(i,n):
            if i + j <=n:
                profit = money_list[i-1] + money_list[j-1]
            profit_table.append(profit)
        
    return profit_table[n-1]
            
          
if __name__ == "__main__":
    n = int(input())
    money = list(map(int, input().split()))
    print(solution(n, money))

# 틀림
=============================================================================


def function(price_list, n):
    price_list.insert(0,0)
    profit_table =[]
    for i in range(1,n+1): 
        if i < len(price_list):  # lis안에 있는 원소들을 최대값이랑 생각하고 일단 다 채워주기  
            profit = price_list[i] 
        else: 
            profit = 0         
        for j in range(1,(i//2)+1): 
            profit = max(profit, price_list[j] + price_list[i-j])
        profit_table.append(profit)     	
    return profit_table[n-1]

if __name__ == "__main__":
    n = int(input())
    price_lis = list(map(int, input().split()))
    print(function(price_lis, n))
    
# 틀림   
=============================================================================


def compare(list1, list2):
    res = []
    for x, y in zip(list1, list2):
        if x >= y:
            res.append(x)
        else:
            res.append(y)
    return res
    

def function(price_list, n):
    price_list.insert(0,0)
    profit_table =[]
    for i in range(1,n+1): 
        if i < len(price_list):  # lis안에 있는 원소들을 최대값이랑 생각하고 일단 다 채워주기  
            profit = price_list[i] 
        else: 
            profit = 0         
        for j in range((i//2)+1): 
            profit = max(profit, price_list[j] + price_list[i-j])
        profit_table.append(profit)  
        
    one_profit_table = []
    for i in range(1,len(price_list)):
        profit = price_list[1] * i 
        one_profit_table.append(profit)           
           
    result = compare(profit_table, one_profit_table)
    return result[n-1]

if __name__ == "__main__":
    n = int(input())
    price_lis = list(map(int, input().split()))
    print(function(price_lis, n))
   
 # 틀림
 
 =================================================================== 
 cardNum = int(input())
profit_table = [0]*(cardNum+1)
cardPrice = [0]+list(map(int, input().split()))
# print(cardPrice)


def solution():
    # profit 0개는 항상 0... 1개는 price의 1개와 같기 떄문에 아래처럼 
    # 2개부터 경우의 수가 생긴다 
    profit_table[0], profit_table[1] = 0, cardPrice[1]
    for i in range(2, cardNum+1):
        for j in range(1, i+1):             
            # j는 항상 i보다 작거나 같다. 따라서 i-j보다 작거나 같다.
            # profit_table보다 card_price으 값이 먼저 있어야 profit이 계산이 되기 때문에 card_price의 j(작은값)을 주고 
            profit_table[i] = max(profit_table[i], profit_table[i-j] + cardPrice[j]) 
    return profit_table[cardNum]   
        
        
print(solution())
        

        
    

        
    


        
    
        
        
    
