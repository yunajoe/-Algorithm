# DFS 


node, line, number = map(int, input().split())

# [[],[2,3,4],[1,4],[1,4],[1,2,3]]
graph = [[] for _ in range(node+1)]
visited = [False] * (node+1)
for i in range(line):
    n1, n2 = map(int, input().split())
    graph[n1].append(n2)
    graph[n2].append(n1)
    
def dfs(graph, number, visited):
    visited[number] = True
    print(number, end= " ")
    for i in graph[number]:
        if not visited[i]: # False이면
            dfs(graph, i, visited)


=====================================================================

# bfs는 first-in, first-out (큐)         


node, line , start_node = map(int, input().split())
graphs = [[] for _ in range(node+1)] 
visited = [False] * (line+1)

for i in range(len(graphs)):
    graphs[i].sort()


def bfs(graph, visited, start_node):
    queue = deque()
    queue.append(start_node)  # 노드를 qeue에 넣어준다 
    visited[start_node] = True 


    while queue:
        current_node = queue.popleft()
        print(current_node, end=" ")

        for n in graph[current_node]:
            if not visited[n]:
                queue.append(n)
                visited[n] = True


bfs(graphs, visited, start_node)







    
    

    

    
