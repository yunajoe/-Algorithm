# 피보나치 수열 

def fib(n):
    if n <=2:
        return 1
    else:
        return fib(n-2) + fib(n-1)
  
for i in range(1, 11):
    print(fib(i))
-----------------------------------------------
# 앞 두자리수 더해
def triangle_number(n):
    if n == 1:
        return 1
    return n + triangle_number(n-1)

for i in range(1, 11):
    print(triangle_number(i))     
    
    
-----------------------------------------------
# 각 자릿수 더하기 
def sum_digits(num):    
    if num < 10:
        return num  
    res = num % 10
    num = num // 10  
    return res + sum_digits(num)      
    
    
print(sum_digits(22541))
print(sum_digits(92130))
print(sum_digits(12634))
print(sum_digits(704))
print(sum_digits(3755))


-----------------------------------------------


# 리스트 뒤집기 

def flip(lis):
    if len(lis) <=1:
        return lis
    last_index = lis.index(lis[-1])
    return lis[last_index:] + flip(lis[:last_index])
    
flip([1, 2, 3, 4, 5, 6, 7, 8, 9])


-----------------------------------------------

# 이진탐색 
def binary_search(element, some_list, start_index=0, end_index=None):  
    if end_index == None:
        end_index = len(some_list) - 1
        
    # base case: start_index가 end_index보다 크면 some_list안에 element는 없다
    if start_index > end_index:
        return None 
    
    # 범위의 중간 인덱스 찾기      
    mid = (start_index + end_index) // 2
    
    if some_list[mid] == element:
        return mid 

    # 
    if element > some_list[mid]:  # mid.index보다 크니까 start는 mid + 1 임당 
        return binary_search(element, some_list, mid+1, end_index)

    else:  # mid.index 보다 작으니까 end 는 mid-1이당
        return binary_search(element, some_list,0, mid-1)
        
        
   
print(binary_search(2, [2, 3, 5, 7, 11]))  # 0, none, 2, 1, 4
print(binary_search(0, [2, 3, 5, 7, 11]))
print(binary_search(5, [2, 3, 5, 7, 11]))
print(binary_search(3, [2, 3, 5, 7, 11]))
print(binary_search(11, [2, 3, 5, 7, 11]))
        
 
    
    
